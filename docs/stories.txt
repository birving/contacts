============================================== Stories ============================================== 
011. User adds or edits data with null (or blank) value (for Medium or Association Type). Save button should not be enabled until data is consistent ; also need some indication of missing data. 
010. User adds duplicate data to GUI table (for Medium or Association Type); duplicate entry is rejected immediately (before clicking Save).
005. User requests removal of used Medium (or Association type) entry and attempts to save changes to database. Change is rejected.

013. User requests full list of companies (name, webpage, notes) 
014. User requests full list of positions (employer, identifier, description, status, recruiterCompany, notes)
015. User requests display of details of one person (name, companyInfo, role, notes, list of locators, list of communications)

========================================= Story Instructions ========================================= 
A strength of Presenter First is the simple, concrete nature of the approach. Development proceeds as follows:

1. Create a stub presenter class that takes a model interface and a view interface in its constructor

2. Create mock test objects that satisfy the model and view interfaces

3. For all user stories
  3.1. Select a prioritized user story
  3.2. Analyze story for impact on view
  3.3. Add support to view interface for the story
  3.4. Analyze story for impact on model
  3.5. Add support to model interface for the story
  3.6. Implement methods in the mock objects for the new interface methods which confirm they were called, or which return typical data
  3.7. For all things that can break (TDD loop)
    3.7.1 Do for each test
      3.7.1.1. Write a test for the presenter that exercises the app via an event or action on the view or model (an external system event)
      3.7.1.2 Make assertions on the state of the model and the state of the view
      3.7.1.3 Implement private methods in presenter Until the test passes
  3.8. Create a minimal user interface implementation to satisfy the view interface for this story
  
========================================= Completed Stories ========================================= 
001. User requests full list of communications media (email, phone). List is displayed on screen.
002. User modifies Medium data (name, type and/or notes); clicks Save button; changes are saved to database. 
003. User requests addition of new Medium entry and saves changes to database. 
004. User requests removal of unused Medium entry and saves changes to database.
006. User requests full list of company association types. List is displayed on screen.
007. User modifies company association type data (name, description); clicks Save button; changes are saved to database.
008. User requests addition of new company association type entry and saves changes to database. 
009. User requests removal of unused company association type entry and saves changes to database.
012. User requests full list of Person entries. (name, company, email, phone, notes)
=====

  